/** *  */package com.xc.xnode.login.controller;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.LockedAccountException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.web.util.SavedRequest;import org.apache.shiro.web.util.WebUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import com.xc.xnode.Message;import com.xc.xnode.common.beans.ShowMessage;import com.xc.xnode.common.controller.BaseController;import com.xc.xnode.common.exception.BaseException;import com.xc.xnode.login.beans.RegisterBean;import com.xc.xnode.login.service.LoginService;/** * @author e592387 * */@Controller@RequestMapping("/login")public class LoginController extends BaseController{		@Autowired	private LoginService loginService;		@RequestMapping(value = "/login")	public String Login(Model model,RedirectAttributes redirectAttributes,HttpServletRequest request,HttpServletResponse response,HttpSession session) {		//判断是否验证成功 		String exceptionClassName = (String)request.getAttribute("shiroLoginFailure");        if(UnknownAccountException.class.getName().equals(exceptionClassName)) {          	addFlashMessage(redirectAttributes,LOGIN_ERROR_MESSAGE);          	return "redirect:/login/login.jhtml";        } else if(IncorrectCredentialsException.class.getName().equals(exceptionClassName)) {        	addFlashMessage(redirectAttributes,Message.error("用户名/密码错误"));        	return "redirect:/login/login.jhtml";        } else if(LockedAccountException.class.getName().equals(exceptionClassName)){        	addFlashMessage(redirectAttributes,Message.error("common.user.locked"));        	return "redirect:/login/login.jhtml";        }else if(exceptionClassName != null) {              addFlashMessage(redirectAttributes,LOGIN_ERROR_MESSAGE);         	return "redirect:/login/login.jhtml";        }          session.setAttribute("tabview", "map");		SavedRequest sr = WebUtils.getSavedRequest(request);		if (sr != null && !sr.getRequestURI().endsWith("/common/main.jhtml")) {			WebUtils.getAndClearSavedRequest(request);		}		if(loginService.isAuthenticated()){			return "redirect:/common/main.jhtml";		}		return "login/login";	}		@RequestMapping(value = "/register")	public String register(Model model){		return "login/register";	}		@RequestMapping(value = "/getPassword")	public String getPassword(Model model){		return "login/forget_password";	}		@RequestMapping(value = "/save",method = RequestMethod.POST)	public String save(Model model,RedirectAttributes redirectAttributes,RegisterBean registerBean){		try{			loginService.saveUser(registerBean);			addFlashMessage(redirectAttributes,SUCCESS_MESSAGE);			return "redirect:/login/login.jhtml";		}catch(BaseException e){			addFlashMessage(redirectAttributes,Message.error(e.getErrorCode()));			return "redirect:/login/register.jhtml";		}	}		@RequestMapping(value = "/userAgreement",method = RequestMethod.GET)	public String userAgreement(Model model){		return "login/user_agreement";	}		@RequestMapping(value = "/checkUser",method = RequestMethod.GET)	@ResponseBody	public boolean checkUser(Model model,String username){		return loginService.checkUser(username);	}		@RequestMapping(value = "/checkEmail",method = RequestMethod.GET)	@ResponseBody	public boolean checkEmail(Model model,RegisterBean registerBean){		return loginService.checkEmail(registerBean);	}		@RequestMapping(value = "/getPwd",method = RequestMethod.POST)	@ResponseBody	public Message getPwd(Model model,RedirectAttributes redirectAttributes,RegisterBean registerBean){		try{			loginService.getPwd(registerBean);			return ShowMessage.SEND_EMAIL_SUCCESS;		}catch(BaseException e){			return ShowMessage.SEND_EMAIL_FAIL;		}	}}