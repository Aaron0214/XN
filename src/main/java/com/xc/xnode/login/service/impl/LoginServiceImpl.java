/** *  */package com.xc.xnode.login.service.impl;import java.util.Date;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.xc.xnode.common.dao.SnMapper;import com.xc.xnode.common.domain.Sn;import com.xc.xnode.common.enums.SnTypeEnum;import com.xc.xnode.common.exception.BaseException;import com.xc.xnode.login.beans.RegisterBean;import com.xc.xnode.login.dao.LoginInfoMapper;import com.xc.xnode.login.domain.LoginInfo;import com.xc.xnode.login.service.LoginService;import com.xc.xnode.user.dao.UserMapper;import com.xc.xnode.user.domain.User;import com.xc.xnode.user.enums.UserStatusEnum;import com.xc.xnode.utils.BeanUtils;import com.xc.xnode.utils.DateUtils;import com.xc.xnode.utils.NumberFormatUtils;/** * @author e592387 * */@Servicepublic class LoginServiceImpl implements LoginService {	@Autowired	private UserMapper userMapper;	@Autowired	private LoginInfoMapper loginInfoMapper;	@Autowired	private SnMapper snMapper;	private Logger logger = LoggerFactory.getLogger(LoginServiceImpl.class);	@Override	public boolean isAuthenticated() {		Subject subject = SecurityUtils.getSubject();		if (subject != null) {			return subject.isAuthenticated();		}		return false;	}	@Override	public void saveUser(RegisterBean registerBean) throws BaseException {		try {			if (BeanUtils.isEmpty(registerBean)) {				throw new BaseException("common.insert.error");			}			User user = new User();			Sn sn = snMapper.selectSnByType(SnTypeEnum.user_code.getKey());			user.setCode("XN" + DateUtils.parseDates(new Date())					+ NumberFormatUtils.formatNumber(sn.getNum()));			user.setUsername(registerBean.getUsername());			user.setPassword(registerBean.getPassword());			user.setEmail(registerBean.getEmail());			user.setCreateDate(new Date());			user.setModifyDate(new Date());			userMapper.insertSelective(user);			// 更新sn表			sn.setNum(sn.getNum() + 1);			snMapper.updateByPrimaryKeySelective(sn);		} catch (Exception e) {			throw new BaseException("common.insert.error");		}	}	@Override	public boolean checkUser(String username) {		User user = userMapper.selectUserByUserName(username);		if (null == user) {			return true;		} else {			return false;		}	}	@Override	public void recordLoginInfo(String username) throws BaseException {		User user = userMapper.selectUserByUserName(username);		if (null == user) {			throw new BaseException("common.user.notfound");		}		LoginInfo loginInfo = loginInfoMapper.selectByUserName(username);		if (null == loginInfo) {			loginInfo = new LoginInfo();			loginInfo.setFailedNum(0);			loginInfo.setLastLogin(new Date());			loginInfo.setUserId(user.getId());			loginInfo.setLoginIp(null);			loginInfoMapper.insertSelective(loginInfo);		} else {			loginInfo.setLastLogin(new Date());			loginInfo.setLoginIp(null);			loginInfoMapper.updateByPrimaryKeySelective(loginInfo);		}	}	@Override	public void updateFailNum(String username) {		LoginInfo loginInfo = loginInfoMapper.selectByUserName(username);		if (null != loginInfo) {			loginInfo.setFailedNum(loginInfo.getFailedNum() + 1);			if (loginInfo.getFailedNum() >= 3) {				User user = userMapper.selectUserByUserName(username);				user.setStatus(UserStatusEnum.LOCK.getKey());				userMapper.updateByPrimaryKeySelective(user);			}			loginInfoMapper.updateByPrimaryKeySelective(loginInfo);		}	}	@Override	public Boolean checkEmail(RegisterBean registerBean) {		try {			User user = userMapper.selectUserByUserName(registerBean					.getUsername());			if (user.getEmail().equals(registerBean.getEmail())) {				getPwd(user);				return true;			}		} catch (Exception e) {			logger.error(e.getMessage(),e.getCause());		}		return false;	}	private void getPwd(User user) throws BaseException {		try {			String password = user.getPassword();		} catch (Exception e) {			throw new BaseException("");		}	}	@Override	public void getPwd(RegisterBean registerBean) throws BaseException {		try {		} catch (Exception e) {			throw new BaseException("");		}	}}