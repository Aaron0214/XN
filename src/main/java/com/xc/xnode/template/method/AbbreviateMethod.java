/** Project Name: xnode* File Name: AbbreviateMethod.java* Class Name: AbbreviateMethod** Copyright 2014 xuce** Licensed under the Hengtiansoft** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an "AS IS" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or* implied.* See the License for the specific language governing permissions and* limitations under the License.*/package com.xc.xnode.template.method;import java.util.List;import java.util.regex.Pattern;import com.xc.xnode.utils.StringUtils;import freemarker.template.SimpleScalar;import freemarker.template.TemplateMethodModelEx;import freemarker.template.TemplateModelException;/** * 模板方法 - 字符串缩略 *  * @author xuce * @version 1.0_beta *///@Component("abbreviateMethod")public class AbbreviateMethod implements TemplateMethodModelEx {	/** 中文字符配比 */	private static final Pattern PATTERN = Pattern.compile("[\\u4e00-\\u9fa5\\ufe30-\\uffa0]+$");	@SuppressWarnings("rawtypes")	public Object exec(List arguments) throws TemplateModelException {		if (arguments != null && !arguments.isEmpty() && arguments.get(0) != null && StringUtils.isNotEmpty(arguments.get(0).toString())) {			Integer width = null;			String ellipsis = null;			if (arguments.size() == 2) {				if (arguments.get(1) != null) {					width = Integer.valueOf(arguments.get(1).toString());				}			} else if (arguments.size() > 2) {				if (arguments.get(1) != null) {					width = Integer.valueOf(arguments.get(1).toString());				}				if (arguments.get(2) != null) {					ellipsis = arguments.get(2).toString();				}			}			return new SimpleScalar(abbreviate(arguments.get(0).toString(), width, ellipsis));		}		return null;	}	/**	 * 	 * 字符串缩略	 * 	 * @param str	 *            原字符串	 * @param width	 *            宽度	 * @param ellipsis	 *            省略符	 * @return 缩略字符	 */	private String abbreviate(String str, Integer width, String ellipsis) {		if (width != null) {			int strLength = 0;			for (int strWidth = 0; strLength < str.length(); strLength++) {				strWidth = PATTERN.matcher(String.valueOf(str.charAt(strLength))).find() ? strWidth + 2 : strWidth + 1;				if (strWidth >= width) {					break;				}			}			if (strLength + 1 < str.length()) {				if (ellipsis != null) {					return str.substring(0, strLength + 1) + ellipsis;				} else {					return str.substring(0, strLength + 1);				}			} else {				return str;			}		} else {			if (ellipsis != null) {				return str + ellipsis;			} else {				return str;			}		}	}}